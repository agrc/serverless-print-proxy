name: Test, Build, and Deploy to GCP

on:
  push:
  pull_request:

env:
  SERVICE_NAME: printproxy

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      OPEN_QUAD_WORD: fake-quad-word

    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2

      # this could be removed once setup-node adds support for .nvmrc files
      # ref: https://github.com/actions/setup-node/issues/32
      - name: Get node version
        id: get_node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get_node_version.outputs.NODE_VERSION }}
      - run: npm ci

      - name: Test
        run: npm run test-ci

  deploy-staging:
    name: Build and Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: Staging
    if: github.ref == 'refs/heads/staging'
    env:
      OPEN_QUAD_WORD: ${{ secrets.OPEN_QUAD_WORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Variables
        id: variables
        shell: bash
        run: |
          PROJECT_ID="${{ secrets.PROJECT_ID }}"
          echo "::set-output name=image::gcr.io/$PROJECT_ID/$SERVICE_NAME"

      # this could be removed once setup-node adds support for .nvmrc files
      # ref: https://github.com/actions/setup-node/issues/32
      - name: Get node version
        id: get_node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get_node_version.outputs.NODE_VERSION }}
      - run: npm ci

      - uses: google-github-actions/setup-gcloud@v0.5.1
        with:
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}

      - run: |-
          gcloud --quiet auth configure-docker

      - name: Build Image
        run: |-
          docker build \
            -t "${{ steps.variables.outputs.image }}:$GITHUB_SHA" \
            .

      - name: Publish Image
        run: |-
          docker push "${{ steps.variables.outputs.image }}" -a

      - name: Deploy
        run: |-
          gcloud run deploy "$SERVICE_NAME" \
            --quiet \
            --platform "managed" \
            --region "us-central1" \
            --image "${{ steps.variables.outputs.image }}:$GITHUB_SHA"

  deploy-prod:
    name: Build and Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: Production
    if: github.ref == 'refs/heads/main'
    env:
      OPEN_QUAD_WORD: ${{ secrets.OPEN_QUAD_WORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get Variables
        id: variables
        shell: bash
        run: |
          PROJECT_ID="${{ secrets.PROJECT_ID }}"
          echo "::set-output name=image::gcr.io/$PROJECT_ID/$SERVICE_NAME"

      # this could be removed once setup-node adds support for .nvmrc files
      # ref: https://github.com/actions/setup-node/issues/32
      - name: Get node version
        id: get_node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.get_node_version.outputs.NODE_VERSION }}
      - run: npm ci

      - uses: google-github-actions/setup-gcloud@v0.5.1
        with:
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.PROJECT_ID }}

      - run: |-
          gcloud --quiet auth configure-docker

      - name: Build Image
        run: |-
          docker build \
            -t "${{ steps.variables.outputs.image }}:$GITHUB_SHA" \
            .

      - name: Publish Image
        run: |-
          docker push "${{ steps.variables.outputs.image }}" -a

      - name: Deploy
        run: |-
          gcloud run deploy "$SERVICE_NAME" \
            --quiet \
            --platform "managed" \
            --region "us-central1" \
            --image "${{ steps.variables.outputs.image }}:$GITHUB_SHA"
